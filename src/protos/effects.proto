syntax = "proto3";

package effects;

import "color.proto";
import "controller.proto";
import "cost.proto";
import "counters.proto";
import "mana.proto";
import "targets.proto";
import "types.proto";

message GainMana {
  message GainMana {
    repeated mana.Mana gains = 1;
  }
  message Specific {
    repeated mana.Mana gains = 1;
  }
  message Choice {
    repeated GainMana choices = 1;
  }

  oneof gain {
    Specific specific = 2;
    Choice choice = 3;
  }
}

message GainManaAbility {
  cost.AbilityCost cost = 1;
  GainMana gain_mana = 2;
}

message ActivatedAbility {
  cost.AbilityCost cost = 1;
  repeated Effect effects = 2;
  bool apply_to_self = 3;
}

message Destination {
  message Hand {
  }
  message TopOfLibrary {
  }
  message Battlefield {
  }

  oneof destination {
    Hand hand = 1;
    TopOfLibrary top_of_library = 2;
    Battlefield battlefield = 3;
  }
}

message TutorLibrary {
  repeated targets.Restriction restrictions = 1;
  Destination destination = 2;
  bool reveal = 3;
}

message Mill {
  int32 count = 1;
  controller.Controller target = 2;
}

message ReturnFromGraveyardToLibrary {
  int32 count = 1;
  controller.Controller controller = 2;
  repeated types.Type types = 3;
}

message ReturnFromGraveyardToBattlefield {
  int32 count = 1;
  repeated types.Type types = 2;
}

message Duration {
  message UntilEndOfTurn {
  }
  message UntilSourceLeavesBattlefield {
  }

  oneof duration {
    UntilEndOfTurn until_end_of_turn = 1;
    UntilSourceLeavesBattlefield until_source_leaves_battlefield = 2;
  }
}

message CounterSpell {
  targets.SpellTarget valid_target = 1;
}

message ExtraLandsPerTurn {
  int32 count = 1;
}

message DynamicPowerToughness {
  message NumberOfCountersOnThis {
    counters.Counter counter = 1;
  }

  oneof source {
    NumberOfCountersOnThis number_of_counters_on_this = 2;
  }
}

message ModifyBattlefield {
  optional int32 base_power = 1;
  optional int32 base_toughness = 2;

  optional DynamicPowerToughness add_dynamic_power_toughness = 3;

  repeated types.Type add_types = 4;
  repeated types.Subtype add_subtypes = 5;

  optional int32 add_power = 6;
  optional int32 add_toughness = 7;

  optional ActivatedAbility add_ability = 8;
  optional GainManaAbility gain_mana = 0;

  bool remove_all_subtypes = 9;

  bool entire_battlefield = 10;
  bool global = 11;

  bool add_vigilance = 12;
}

message BattlefieldModifier {
  ModifyBattlefield modifier = 1;
  controller.Controller controller = 2;
  Duration duration = 3;
  repeated targets.Restriction restrictions = 4;
}

message CreateToken {
  message Creature {
    string name = 1;
    repeated types.Type types = 2;
    repeated types.Subtype subtypes = 3;
    repeated color.Color colors = 4;
    int32 power = 5;
    int32 toughness = 6;
  }

  oneof token {
    Creature creature = 7;
  }
}

message ControllerDrawCards {
  int32 count = 1;
}

message Equip {
  repeated ModifyBattlefield modifiers = 1;
}

message ExileTargetCreature {
}

message ExileTargetCreatureManifestTopOfLibrary {
}

message DealDamage {
  int32 quantity = 1;
  repeated targets.Restriction restrictions = 2;
}

message GainCounter {
  counters.Counter counter = 1;
}

message Effect {
  oneof effect {
    BattlefieldModifier battlefield_modifier = 1;
    BattlefieldModifier modify_creature = 2;
    ControllerDrawCards controller_draw_cards = 3;
    CounterSpell counter_spell = 4;
    CreateToken create_token = 5;
    DealDamage deal_damage = 6;
    Equip equip = 7;
    ExileTargetCreature exile_target_creature = 8;
    ExileTargetCreatureManifestTopOfLibrary 
      exile_target_creature_manifest_top_of_library = 9;
    GainCounter gain_counter = 10;
  }

  optional Effect threshold = 11;
}