syntax = "proto3";

package cost;

import "counters.proto";
import "mana.proto";
import "targets.proto";
import "types.proto";

message ManaCost {
  oneof cost {
    mana.White white = 1;
    mana.Blue blue = 2;
    mana.Black black = 3;
    mana.Red red = 4;
    mana.Green green = 5;
    mana.Colorless colorless = 6;
    mana.Generic generic = 7;
    mana.X x = 8;
    mana.TwoX twox = 9;
  }
}

message AdditionalCost {
  message DiscardThis {}
  message ExileCard {
    repeated targets.Restriction restrictions = 1;
  }
  message ExileCardsCmcX {
    repeated targets.Restriction restrictions = 1;
  }
  message ExileSharingCardType {
    int32 count = 1;
  }
  message ExileXOrMoreCards {
    int32 minimum = 1;
    repeated targets.Restriction restrictions = 2;
  }
  message PayLife {
    int32 count = 1;
  }
  message RemoveCounters {
    counters.Counter counter = 1;
    int32 count = 2;
  }
  message SacrificePermanent {
    repeated targets.Restriction restrictions = 1;
  }
  message SacrificeSource {}
  message TapPermanent {
    repeated targets.Restriction restrictions = 1;
  }
  message TapPermanentsPowerXOrMore {
    int32 x_is = 1;
    repeated targets.Restriction restrictions = 2;
  }

  oneof cost {
    DiscardThis discard_this = 3;
    ExileCard exile_card = 4;
    ExileCardsCmcX exile_cards_cmc_x = 5;
    ExileSharingCardType exile_sharing_card_type = 6;
    ExileXOrMoreCards exile_x_or_more_cards = 7;
    PayLife pay_life = 8;
    RemoveCounters remove_counters = 9;
    SacrificePermanent sacrifice_permanent = 10;
    SacrificeSource sacrifice_source = 11;
    TapPermanent tap_permanent = 12;
    TapPermanentsPowerXOrMore tap_permanents_power_x_or_more = 13;
  }
}

message AbilityRestriction {
  message AttackedWithXOrMoreCreatures {
    int32 x_is = 1;
  }

  oneof restriction {
    AttackedWithXOrMoreCreatures attacked_with_x_or_more_creatures = 2;
  }
}

message Ward {
  repeated ManaCost mana_costs = 1;
}

message CastingCost {
  repeated ManaCost mana_costs = 1;
  repeated AdditionalCost additional_costs = 2;
}

message AbilityCost {
  repeated ManaCost mana_costs = 1;
  optional bool tap = 2;
  repeated AdditionalCost additional_costs = 3;
  repeated AbilityRestriction restrictions = 4;
}

message XIs {
  message Cmc {}
  oneof x_is {
    Cmc cmc = 1;
  }
}

message CostReducer {
  message TargetTappedCreature {}

  oneof when {
    TargetTappedCreature target_tapped_creature = 1;
  }

  ManaCost reduction = 2;
}