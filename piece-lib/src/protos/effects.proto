syntax = "proto3";

package effects;

import "color.proto";
import "cost.proto";
import "counters.proto";
import "empty.proto";
import "mana.proto";
import "targets.proto";
import "types.proto";

message Effect {
  oneof effect {
    // Apply an effect, then apply another effect, allowing another round of
    // choosing targets.
    ApplyThen apply_then = 1;
    // Apply an effect, then examine the log of results from the effect and
    // compare it to a list of restrictions. If any log entry resulting from the
    // applied effects matches, apply another effect. This is used e.g. to apply
    // an effect if the target that just left the battlefield was tapped.
    ApplyThenIfWas apply_then_if_was = 2;
    // Implement the Battle Cry effect. You don't need to use this directly,
    // specifying the Battle Cry keyword in the keyword list is enough.
    BattleCry battle_cry = 3;
    // Apply a modifier to the battlefield without targeting anything. Typically
    // you will want to set the `entire_battlefield` flag to true for the
    // modifier.
    BattlefieldModifier battlefield_modifier = 4;
    // Prevent target player from attacking this turn.
    CantAttackThisTurn cant_attack_this_turn = 5;
    // Implement the keyword Cascade. You probably don't want to use this -
    // instead use the Cascade keyword in the keywords list.
    Cascade cascade = 6;
    // The controller of the card triggering the effect discards some number of
    // cards unless they meet some restrictions.
    ControllerDiscards controller_discards = 7;
    // The controller of the card triggering the effect draws some number of
    // cards.
    ControllerDrawsCards controller_draws_cards = 8;
    // The controller of the card triggering the effect loses life unless they
    // meet some restrictions.
    ControllerLosesLife controller_loses_life = 9;
    // Copy any creature on the battlefield without checking if it can be
    // targetted (i.e. ignore hexproof and shroud). This is used to implement
    // e.g. Clone.
    CopyOfAnyCreatureNonTargeting copy_of_any_creature_non_targeting = 10;
    // Copy a spell or ability on the stack
    CopySpellOrAbility copy_spell_or_ability = 11;
    // Counter a spell.
    CounterSpellOrAbility counter_spell_or_ability = 12;
    // Counter spell unless the spell's controller pays some cost.
    CounterSpellUnlessPay counter_spell_unless_pay = 13;
    // Create a token.
    CreateToken create_token = 14;
    // Create a token copy of another permanent with some modifiers applied.
    CreateTokenCopy create_token_copy = 15;
    // Implement the cycling keyword. If there are restrictions listed for the
    // effect, it will act as a tutor for matching cards. If no restrictions are
    // specified, it will default to drawing a card.
    Cycling cycling = 16;
    // Deal some amount of damage to any target, narrowed by restrictions.
    DealDamage deal_damage = 17;
    // Destroy each permanent matching some set of restrictions.
    DestroyEach destroy_each = 18;
    // Destroy a target permanent from a target list narrowed by restrictions.
    DestroyTarget destroy_target = 19;
    // Implement the Discover keyword.
    Discover discover = 20;
    // Apply modifiers to a target using the Equip mechanics.
    Equip equip = 21;
    // Examine the top N cards of the effect controller's library and give the
    // player a choice of where to move the cards to. This is used to implement
    // e.g. Confounding Riddle's effect.
    ExamineTopCards examine_top_cards = 22;
    // Exile a target from a list narrowed by a set of restrictions.
    ExileTarget exile_target = 23;
    // TODO: This should probably be split into two separate effects. It is
    // currently used to implement just Reality Shift.
    ExileTargetCreatureManifestTopOfLibrary
        exile_target_creature_manifest_top_of_library = 24;
    // Exile the graveyard of target player.
    ExileTargetGraveyard exile_target_graveyard = 25;
    // For each mana from a particular source (e.g. cave or treasure) spent on
    // casting this effect's card, apply some effects.
    ForEachManaOfSource for_each_mana_of_source = 26;
    // Choose a permanent matching some list of restrictions for each player,
    // then apply some effects.
    ForEachPlayerChooseThen for_each_player_choose_then = 27;
    // The controller of this effect gains life.
    GainLife gain_life = 28;
    // If the source of this effect passes some restrictions, apply some
    // effects. Otherwise, apply a different set of effects. This is used to
    // implement e.g. threshold.
    IfThenElse if_then_else = 29;
    // Mill some number of cards for a target player.
    Mill mill = 30;
    // Offer the controller of this effect a choice between several modes, then
    // apply the chosen effects.
    Modes modal = 31;
    // Apply a modifier to a specific target from a list of valid targets.
    ModifyTarget modify_target = 32;
    // Multiply the number of tokens created. This is only applied as a
    // replacement effect.
    MultiplyTokens multiply_tokens = 33;
    // Ask the controller of this effect to pay some cost, then apply some
    // effects if they paid the cost.
    PayCostThen pay_cost_then = 34;
    // Return a card from the graveyard to the battlefield.
    ReturnFromGraveyardToBattlefield return_from_graveyard_to_battlefield = 35;
    // Return a card from the graveyard to the hand. TODO: This should probably
    // be merged with ReturnTargetToHand.
    ReturnFromGraveyardToHand return_from_graveyard_to_hand = 36;
    // Return a card from the graveyard to the library. TODO: This should
    // probably be merged with TargetToTopOfLibrary.
    ReturnFromGraveyardToLibrary return_from_graveyard_to_library = 37;
    // Return the card associated with this effect to hand.
    ReturnSelfToHand return_self_to_hand = 38;
    // Return target card to the hand.
    ReturnTargetToHand return_target_to_hand = 39;
    // Return a card from exile or graveyard to the battlefield transformed.
    ReturnTransformed return_transformed = 40;
    // Reveal the top card of each player's library, then apply some effects
    // depending on the revealed cards.
    RevealEachTopOfLibrary reveal_each_top_of_library = 41;
    // Scry some number of cards.
    Scry scry = 42;
    // The card with the effect explores.
    SelfExplores self_explores = 43;
    // Tap a target permanent. This automatically narrows the list of targets to
    // targets on the battlefield.
    TapTarget tap_target = 44;
    // Tap the card associated with this effect.
    TapThis tap_this = 45;
    // The controller of something targetted by another effect gets a token.
    TargetControllerGainsTokens target_controller_gains_tokens = 46;
    // A target permanent on battlefield, narrowed by restrictions, becomes a
    // copy of another permanent spell or on the battlefield, narrowed by
    // restrictions.
    TargetCopiesPermanent target_copies_permanent = 47;
    // The targetted creature explores. This automatically narrows the list of
    // valid targets to creatures on the battlefield.
    TargetCreatureExplores target_creature_explores = 48;
    // Place some number of counters on a target, narrowed by a list of
    // restrictions.
    TargetGainsCounters target_gains_counters = 49;
    // Return target to the top of its owner's library.
    TargetToTopOfLibrary target_to_top_of_library = 50;
    // Transform in place on the battlefield. This will preserve equipment and
    // auras attached to the transformed card.
    Transform transform = 51;
    // Search the library for cards matching some set of restrictions and allow
    // the player to move it to a location.
    TutorLibrary tutor_library = 52;
    // Untap the card associated with this effect.
    UntapThis untap_this = 53;
    // Untap a target permanent. THis automatically narrows the list of targets
    // to targets on the battlefield.
    UntapTarget untap_target = 54;
  }

  string oracle_text = 55;
}

message ActivatedAbility {
  cost.AbilityCost cost = 1;
  repeated Effect effects = 2;
  bool apply_to_self = 3;
  string oracle_text = 4;
  bool sorcery_speed = 5;
  bool craft = 6;
}

message ApplyThen {
  repeated Effect apply = 1;
  repeated Effect then = 2;
}

message ApplyThenIfWas {
  message Then {
    repeated targets.Restriction if_was = 1;
    repeated Effect apply = 2;
  }

  repeated Effect apply = 3;
  Then then = 4;
}

message BattleCry {}

message BattlefieldModifier {
  ModifyBattlefield modifier = 1;
  Duration duration = 2;
  repeated targets.Restriction restrictions = 3;
}

message CantAttackThisTurn {
  repeated targets.Restriction restrictions = 1;
}

message Cascade {}

message ControllerDiscards {
  uint32 count = 1;
  repeated targets.Restriction unless = 2;
}

message ControllerDrawsCards {
  message Fixed {
    int32 count = 1;
  }

  oneof count {
    Fixed fixed = 2;
    NumberOfPermanentsMatching number_of_permanents_matching = 3;
  }
}

message ControllerLosesLife {
  uint32 count = 1;
  repeated targets.Restriction unless = 2;
}

message CopyOfAnyCreatureNonTargeting {}

message CopySpellOrAbility {
  repeated targets.Restriction restrictions = 1;
}

message CounterSpellOrAbility {
  repeated targets.Restriction restrictions = 1;
}

message CounterSpellUnlessPay {
  message Fixed {
    int32 count = 1;
  }

  oneof cost {
    Fixed fixed = 2;
  }

  repeated targets.Restriction restrictions = 3;
}

message CreateToken {
  message Creature {
    string name = 1;
    types.Typeline typeline = 2;
    repeated color.Color colors = 3;
    optional DynamicPowerToughness dynamic_power_toughness = 4;
    int32 power = 5;
    int32 toughness = 6;
    map<int32, uint32> keywords = 7;
  }
  message Map {}

  oneof token {
    Creature creature = 1;
    Map map = 2;
  }
}

message CreateTokenCopy {
  repeated ModifyBattlefield modifiers = 1;
}

message Cycling {
  map<int32, empty.Empty> types = 1;
  map<int32, empty.Empty> subtypes = 2;
}

message DealDamage {
  uint32 quantity = 1;
  repeated targets.Restriction restrictions = 2;
}

message Destination {
  message Hand {}
  message TopOfLibrary {}
  message BottomOfLibrary {}
  message Graveyard {}
  message Battlefield {
    bool enters_tapped = 1;
  }
  oneof destination {
    Hand hand = 2;
    TopOfLibrary top_of_library = 3;
    BottomOfLibrary bottom_of_library = 4;
    Graveyard graveyard = 5;
    Battlefield battlefield = 6;
  }
}

message DestroyEach {
  repeated targets.Restriction restrictions = 1;
}

message DestroyTarget {
  repeated targets.Restriction restrictions = 1;
}

message Discover {
  message X {
    cost.XIs x_is = 1;
  }
  message Fixed {
    uint32 count = 1;
  }
  oneof count {
    X x = 2;
    Fixed fixed = 3;
  }
}

enum Duration {
  PERMANENTLY = 0;
  UNTIL_END_OF_TURN = 1;
  UNTIL_SOURCE_LEAVES_BATTLEFIELD = 2;
  UNTIL_TARGET_LEAVES_BATTLEFIELD = 3;
  UNTIL_UNTAPPED = 4;
}

message DynamicPowerToughness {
  oneof source {
    NumberOfCountersOnThis number_of_counters_on_this = 1;
    NumberOfPermanentsMatching number_of_permanents_matching = 2;
  }

  message NumberOfCountersOnThis {
    counters.Counter counter = 1;
  }
}

message Equip {
  repeated ModifyBattlefield modifiers = 1;
}

message ExamineTopCards {
  message Dest {
    Destination destination = 1;
    uint32 count = 2;
  }

  uint32 count = 3;
  repeated Dest destinations = 4;
}

message ExileTarget {
  Duration duration = 1;
  repeated targets.Restriction restrictions = 2;
}

message ExileTargetCreatureManifestTopOfLibrary {}

message ExileTargetGraveyard {}

message ExtraLandsPerTurn {
  uint32 count = 1;
}

message ForEachManaOfSource {
  mana.ManaSource source = 1;
  Effect effect = 2;
}

message ForEachPlayerChooseThen {
  repeated targets.Restriction restrictions = 1;
  bool is_optional = 2;
  repeated Effect effects = 3;
}

message GainLife {
  uint32 count = 1;
}

message GainMana {
  message Specific {
    repeated mana.Mana gain = 1;
  }
  message GainMana {
    repeated mana.Mana gains = 1;
  }
  message Choice {
    repeated GainMana choices = 1;
  }
  oneof gain {
    Specific specific = 2;
    Choice choice = 3;
  }
}

message GainManaAbility {
  cost.AbilityCost cost = 1;
  GainMana gain_mana = 2;
  mana.ManaSource mana_source = 3;
  mana.ManaRestriction mana_restriction = 4;
  string oracle_text = 5;
}

message IfThenElse {
  repeated targets.Restriction if = 1;
  Effect then = 2;
  Effect else = 3;
}

message Mill {
  uint32 count = 1;
  repeated targets.Restriction restrictions = 2;
}

message ModifyBattlefield {
  optional int32 base_power = 1;
  optional int32 base_toughness = 2;
  optional DynamicPowerToughness add_dynamic_power_toughness = 3;
  map<int32, empty.Empty> add_types = 4;
  map<int32, empty.Empty> add_subtypes = 5;
  map<int32, empty.Empty> remove_types = 6;
  map<int32, empty.Empty> remove_subtypes = 7;
  repeated color.Color add_colors = 8;
  optional int32 add_power = 9;
  optional int32 add_toughness = 10;
  optional ActivatedAbility add_ability = 11;
  optional GainManaAbility mana_ability = 12;
  repeated StaticAbility add_static_abilities = 13;
  bool remove_all_creature_types = 14;
  bool remove_all_types = 15;
  bool remove_all_subtypes = 16;
  bool remove_all_colors = 17;
  bool remove_all_abilities = 18;
  bool entire_battlefield = 19;
  bool global = 20;
  map<int32, uint32> add_keywords = 21;
  map<int32, uint32> remove_keywords = 22;
}

message MultiplyTokens {
  uint32 multiplier = 1;
}

message NumberOfPermanentsMatching {
  repeated targets.Restriction restrictions = 1;
}

message PayCostThen {
  cost.AbilityCost cost = 1;
  repeated Effect effects = 2;
}

message ReturnFromGraveyardToBattlefield {
  uint32 count = 1;
  repeated targets.Restriction restrictions = 2;
  optional cost.XIs x_is = 3;
  bool enters_tapped = 4;
}

message ReturnFromGraveyardToHand {
  uint32 count = 1;
  repeated targets.Restriction restrictions = 2;
}

message ReturnFromGraveyardToLibrary {
  uint32 count = 1;
  repeated targets.Restriction restrictions = 2;
}

message ReturnSelfToHand {}

message ReturnTargetToHand {
  repeated targets.Restriction restrictions = 1;
}

message RevealEachTopOfLibrary {
  message ForEach {
    message IfNone {
      repeated Effect effects = 1;
    }
    repeated targets.Restriction restrictions = 2;
    repeated Effect effects = 3;
    IfNone if_none = 4;
  }
  ForEach for_each = 5;
}

message Scry {
  uint32 count = 1;
}

message SelfExplores {}

message StaticAbility {
  message AddKeywordsIf {
    map<int32, uint32> keywords = 1;
    repeated targets.Restriction restrictions = 2;
  }
  message AllAbilitiesOfExiledWith {
    repeated cost.AbilityRestriction activation_restrictions = 1;
  }
  message CantCastIfAttacked {}
  message ForceEtbTapped {
    repeated targets.Restriction restrictions = 1;
  }
  message GreenCannotBeCountered {
    repeated targets.Restriction restrictions = 1;
  }
  message PreventAttacks {}
  message PreventBlocks {}
  message PreventAbilityActivation {}
  message UntapEachUntapStep {}

  oneof ability {
    AddKeywordsIf add_keywords_if = 1;
    AllAbilitiesOfExiledWith all_abilities_of_exiled_with = 2;
    BattlefieldModifier battlefield_modifier = 3;
    CantCastIfAttacked cant_cast_if_attacked = 4;
    ExtraLandsPerTurn extra_lands_per_turn = 5;
    ForceEtbTapped force_etb_tapped = 6;
    GreenCannotBeCountered green_cannot_be_countered = 7;
    PreventAttacks prevent_attacks = 8;
    PreventBlocks prevent_blocks = 9;
    PreventAbilityActivation prevent_ability_activation = 10;
    UntapEachUntapStep untap_each_untap_step = 11;
  }
}

message TapTarget {
  repeated targets.Restriction restrictions = 1;
}

message TapThis {}

message TargetControllerGainsTokens {
  CreateToken create_token = 1;
}

message TargetCopiesPermanent {
  repeated targets.Restriction target_restrictions = 1;
  repeated targets.Restriction copy_restrictions = 2;
}

message TargetCreatureExplores {}

message TargetGainsCounters {
  message Single {}
  message Multiple {
    uint32 count = 1;
  }
  message Dynamic {
    message X {}
    message LeftBattlefieldThisTurn {
      repeated targets.Restriction restrictions = 1;
    }

    oneof dynamic {
      LeftBattlefieldThisTurn left_battlefield_this_turn = 2;
      X x = 3;
    }
  }

  oneof count {
    Single single = 4;
    Multiple multiple = 5;
    Dynamic dynamic = 6;
  }

  counters.Counter counter = 7;
  repeated targets.Restriction restrictions = 8;
  bool is_optional = 9;
}

message TargetToTopOfLibrary {
  uint32 under_cards = 1;
  repeated targets.Restriction restrictions = 2;
}

message Transform {}

message TutorLibrary {
  repeated targets.Restriction restrictions = 1;
  Destination destination = 2;
  bool reveal = 3;
}

message ReturnTransformed {
  bool enters_tapped = 1;
}

message UntapTarget {
  repeated targets.Restriction restrictions = 1;
}

message UntapThis {}

message Mode {
  repeated Effect effects = 1;
}

message Modes {
  repeated Mode modes = 1;
}

message ModifyTarget {
  ModifyBattlefield modifier = 1;
  Duration duration = 2;
  repeated targets.Restriction restrictions = 3;
}

message ReplacementEffect {
  enum Replacing {
    DRAW = 0;
    ETB = 1;
    TOKEN_CREATION = 2;
  }

  Replacing replacing = 3;
  repeated targets.Restriction restrictions = 4;
  repeated Effect effects = 5;
}