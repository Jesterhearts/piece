syntax = "proto3";

package effects;

import "color.proto";
import "comment.proto";
import "cost.proto";
import "counters.proto";
import "empty.proto";
import "ids.proto";
import "mana.proto";
import "targets.proto";
import "triggers.proto";
import "types.proto";

message Effect {
  string oracle_text = 1;

  oneof effect {
    AddCounters add_counters = 2
        [(comment.comment) =
             "Add some number of counters to the selected target(s)."];
    ApplyModifier apply_modifier = 3
        [(comment.comment) = "Apply a modifier to the selected target(s)."];
    ApplyToEachTarget apply_to_each_target = 4
        [(comment.comment) = "Apply some effects to each selected target."];
    AttackSelected attack_selected = 5 [
      (comment.comment) =
          "Take the last selected target and set it as attacking the first selected target."
    ];
    BanAttackingThisTurn ban_attacking_this_turn = 6
        [(comment.comment) =
             "Ban the selected target from attacking this turn."];
    Cascade cascade = 7 [
      (comment.comment) =
          "Implement the Cascade effect. You don't need to use this, the Cascade keyword will work.",
      (comment.hidden) = true
    ];
    CastSelected cast_selected = 8
        [(comment.comment) = "Cast the selected cards."];
    ChooseAttackers choose_attackers = 9 [
      (comment.comment) = "Choose attackers and their targets.",
      (comment.hidden) = true
    ];
    ChooseCast choose_cast = 10
        [(comment.comment) =
             "Choose whether or not to cast the selected spell(s)."];
    ClearSelected clear_selected = 11
        [(comment.comment) = "Clear the current selection."];
    CloneSelected clone_selected = 12 [
      (comment.comment) =
          "Take two selected targets and make the first target a clone of the second."
    ];
    CompleteSpellResolution complete_spell_resolution = 13 [
      (comment.comment) =
          "Complete resolving a spell, adding it to the battlefield or moving it to the graveyard. Used internally.",
      (comment.hidden) = true
    ];
    CopySpellOrAbility copy_spell_or_ability = 14
        [(comment.comment) = "Copy the selected spell or ability."];
    CounterSpell counter_spell = 15
        [(comment.comment) = "Counter the selected spell(s)."];
    CreateToken create_token = 16 [
      (comment.comment) =
          "Create a token under the control of the selected player and select it."
    ];
    CreateTokenCloneOfSelected create_token_clone_of_selected = 17 [
      (comment.comment) =
          "Create a token clone of the selected target and place it under the control of the second selected target and select it."
    ];
    Cycling cycling = 18 [
      (comment.comment) =
          "Implement the Cycling keyword. If no restrictions are specified, draw a card. Otherwise, tutor the controlling player's library for a card."
    ];
    DamageSelected damage_selected = 19
        [(comment.comment) = "Apply damage to the selected target(s)."];
    DeclareAttacking declare_attacking = 20
        [(comment.comment) = "Declare the selected card(s) as attacking."];
    DestroySelected destroy_selected = 21
        [(comment.comment) = "Destroy the selected target(s)."];
    Discard discard = 22
        [(comment.comment) =
             "The selected target(s) discard some number of cards."];
    DiscardSelected discard_selected = 23
        [(comment.comment) = "Discard the selected card(s)."];
    Discover discover = 24
        [(comment.comment) = "Implement the Discover mechanic."];
    DrawCards draw_cards = 25
        [(comment.comment) = "The selected target draws some number of cards."];
    Equip equip = 26
        [(comment.comment) = "Equip the source to the selected target."];
    ExileGraveyard exile_graveyard = 27
        [(comment.comment) = "Exile the selected target's graveyard."];
    Explore explore = 28
        [(comment.comment) = "The selected target(s) explore(s)."];
    ForEachManaOfSource for_each_mana_of_source = 29 [
      (comment.comment) =
          "For each mana from a particular source used in the activation of this ability or casting of this spell, apply some effects."
    ];
    GainLife gain_life = 30
        [(comment.comment) = "The selected target(s) gain life."];
    GainMana gain_mana = 31
        [(comment.comment) = "The selected target gains mana."];
    IfThenElse if_then_else = 32 [
      (comment.comment) =
          "If the selected target(s) match some criteria, apply an effect. Otherwise apply a different effect."
    ];
    LoseLife lose_life = 33
        [(comment.comment) = "The selected target(s) lose life."];
    Manifest manifest = 34
        [(comment.comment) =
             "The selected target manifests the top card of their library."];
    Mill mill = 35 [(comment.comment) = "Mill some number of cards"];
    Modal modal = 36
        [(comment.comment) =
             "Apply some effects according to the selected mode(s)."];
    MoveToBattlefield move_to_battlefield = 37
        [(comment.comment) = "Move the selected card(s) to the battlefield."];
    MoveToBottomOfLibrary move_to_bottom_of_library = 38
        [(comment.comment) =
             "Move the selected card(s) to their owner's library."];
    MoveToExile move_to_exile = 39
        [(comment.comment) = "Move the selected card(s) to exile."];
    MoveToGraveyard move_to_graveyard = 40
        [(comment.comment) = "Move the selected card(s) to the graveyard."];
    MoveToHand move_to_hand = 41
        [(comment.comment) =
             "Move the selected card(s) to their owner's hand."];
    MoveToStack move_to_stack = 42 [
      (comment.comment) =
          "Pop the current selection and use them as targets to the restored selection, casting the restored value."
    ];
    MoveToTopOfLibrary move_to_top_of_library = 43
        [(comment.comment) =
             "Move the selected card(s) to their owner's library."];
    MultiplyTokens multiply_tokens = 44 [
      (comment.comment) =
          "Multiply the number of tokens created. Used for replacement effects."
    ];
    Nothing nothing = 45
        [(comment.comment) = "Take no action. Used to pad modes."];
    Overwrite overwrite = 46 [
      (comment.comment) =
          "Replace an effect by overwriting it with another set of effects."
    ];
    PayCosts pay_costs = 47 [(comment.comment) = "Pay some costs."];
    PlayerLoses player_loses = 48
        [(comment.comment) = "The selected player loses the game."];
    PopSelected pop_selected = 49 [
      (comment.comment) =
          "Clear the current selection and restore the previously pushed selection."
    ];
    PushSelected push_selected = 50
        [(comment.comment) = "Save the current selection."];
    RemoveCounters remove_counters = 51 [
      (comment.comment) =
          "The selected target(s) have some number of counters removed from them."
    ];
    ReorderSelected reorder_selected = 52 [
      (comment.comment) = "Re-order the list of selected target(s).",
      (comment.hidden) = true
    ];
    Reveal reveal = 53 [(comment.comment) = "Reveal the selected target(s)."];
    Sacrifice sacrifice = 54
        [(comment.comment) = "Sacrifice the selecteed target(s)."];
    Scry scry = 55 [(comment.comment) = "Scry some number of cards."];
    SelectAll select_all = 56 [
      (comment.comment) =
          "Select all possible cards/abilities/players matching some criteria."
    ];
    SelectAllPlayers select_all_players = 57
        [(comment.comment) = "Select all players."];
    SelectDestinations select_destinations = 58
        [(comment.comment) = "Select destination(s) for each selected card."];
    SelectEffectController select_effect_controller = 59
        [(comment.comment) =
             "Select the controller of the card associated with this effect."];
    SelectExiledWithCascadeOrDiscover select_exiled_with_cascade_or_discover =
        60 [
          (comment.comment) =
              "Select all cards exiled with a cascade or discover mechanic.",
          (comment.hidden) = true
        ];
    SelectForEachPlayer select_for_each_player = 61
        [(comment.comment) =
             "For each player, select a target matching some criteria."];
    SelectMode select_mode = 62
        [(comment.comment) = "Select from among a set of modal effects."];
    SelectNonTargeting select_non_targeting = 63 [
      (comment.comment) =
          "Select some cards without checking if they can be targetted (e.g. ignore Shroud/Hexproof)."
    ];
    SelectSource select_source = 64
        [(comment.comment) = "Select the card associated with this effect."];
    SelectTargetController select_target_controller = 65
        [(comment.comment) =
             "Select the controller of the currently selected target."];
    SelectTargets select_targets = 66 [
      (comment.comment) =
          "Select some cards, abilities, or players, validating that they can be targetted."
    ];
    SelectTopOfLibrary select_top_of_library = 67 [
      (comment.comment) =
          "Select some number of cards from the top of the selected target(s) librar(y|ies)."
    ];
    ShuffleSelected shuffle_selected = 68
        [(comment.comment) = "Randomize the selected card(s)."];
    SpendMana spend_mana = 69 [
      (comment.comment) =
          "Spend some mana on the first selected target from the controlling player's mana pool."
    ];
    Tap tap = 70 [(comment.comment) = "Tap the selected target(s)."];
    Transform transform = 71
        [(comment.comment) = "Transform the selected card."];
    TutorLibrary tutor_library = 72
        [(comment.comment) = "Search the target's library for some cards."];
    Unless unless = 73
        [(comment.comment) =
             "Apply an effect unless the selection matches some restrictions."];
    Untap untap = 74 [(comment.comment) = "Untap the selected target(s)."];
  };
}

/// Enums and common utilities.

message BattlefieldModifier {
  ModifyBattlefield modifier = 1;
  Duration duration = 2;
  repeated targets.Restriction restrictions = 3;
}

message Count {
  message Fixed {
    int32 count = 1;
  }
  message LeftBattlefieldThisTurn {
    repeated targets.Restriction restrictions = 1;
  }
  message NumberOfCountersOnSelected {
    counters.Counter type = 1;
  }
  message NumberOfPermanentsMatching {
    repeated targets.Restriction restrictions = 1;
  }
  message XCost {}
  message X {
    cost.XIs x_is = 1;
  }

  oneof count {
    Fixed fixed = 2;
    LeftBattlefieldThisTurn left_battlefield_this_turn = 3;
    NumberOfCountersOnSelected number_of_counters_on_selected = 4;
    NumberOfPermanentsMatching number_of_permanents_matching = 5;
    XCost x_cost = 6;
    X x = 7;
  }
}

message Dest {
  oneof destination {
    MoveToBattlefield move_to_battlefield = 1;
    MoveToExile move_to_exile = 2;
    MoveToGraveyard move_to_graveyard = 3;
    MoveToHand move_to_hand = 4;
    MoveToBottomOfLibrary move_to_bottom_of_library = 5;
    MoveToTopOfLibrary move_to_top_of_library = 6;
  }

  uint32 count = 7;
  repeated ids.CardId cards = 8;
}

enum Duration {
  PERMANENTLY = 0;
  UNTIL_END_OF_TURN = 1;
  UNTIL_SOURCE_LEAVES_BATTLEFIELD = 2;
  UNTIL_TARGET_LEAVES_BATTLEFIELD = 3;
  UNTIL_UNTAPPED = 4;
}

message Mode {
  repeated Effect effects = 1;
  uint32 applying = 2 [(comment.hidden) = true];
}

message ModifyBattlefield {
  optional int32 base_power = 1;
  optional int32 base_toughness = 2;
  optional Count add_dynamic_power_toughness = 3;
  map<int32, empty.Empty> add_types = 4;
  map<int32, empty.Empty> add_subtypes = 5;
  map<int32, empty.Empty> remove_types = 6;
  map<int32, empty.Empty> remove_subtypes = 7;
  repeated color.Color add_colors = 8;
  optional int32 add_power = 9;
  optional int32 add_toughness = 10;
  optional ActivatedAbility add_ability = 11;
  optional GainManaAbility mana_ability = 12;
  repeated StaticAbility add_static_abilities = 13;
  bool remove_all_creature_types = 14;
  bool remove_all_types = 15;
  bool remove_all_subtypes = 16;
  bool remove_all_colors = 17;
  bool remove_all_abilities = 18;
  bool unblockable = 19;
  bool entire_battlefield = 20;
  bool global = 21;
  map<int32, uint32> add_keywords = 22;
  map<int32, uint32> remove_keywords = 23;
}

enum SimpleDestination {
  BATTLEFIELD = 0;
  GRAVEYARD = 1;
  EXILE = 2;
  HAND = 3;
  BOTTOM_OF_LIBRARY = 4;
  TOP_OF_LIBRARY = 5;
}

message TargetSelection {
  oneof selector {
    Modal modal = 1;
    SelectTargets select_targets = 2;
    SelectNonTargeting select_non_targeting = 3;
    SelectForEachPlayer select_for_each_player = 4;
  }
}

/// Abilities

message ActivatedAbility {
  cost.AbilityCost cost = 1;

  TargetSelection targets = 2;
  repeated Effect additional_costs = 3;
  repeated Effect effects = 4;

  string oracle_text = 5;
  bool sorcery_speed = 6;
  bool craft = 7;
  bool can_activate_in_hand = 8;
}

message EtbAbility {
  string oracle_text = 1;
  SelectMode modes = 2;
  TargetSelection targets = 3;
  repeated Effect additional_costs = 4;
  repeated effects.Effect effects = 5;
}

message GainManaAbility {
  cost.AbilityCost cost = 1;

  repeated Effect additional_costs = 2;
  repeated Effect effects = 3;

  string oracle_text = 4;
}

message ReplacementEffect {
  enum Replacing {
    DRAW = 0;
    ETB = 1;
    TOKEN_CREATION = 2;
  }

  Replacing replacing = 3;
  repeated targets.Restriction restrictions = 4;
  bool can_activate_in_hand = 5;
  repeated Effect effects = 6;
}

message StaticAbility {
  message AddKeywordsIf {
    map<int32, uint32> keywords = 1;
    repeated targets.Restriction restrictions = 2;
  }
  message AllAbilitiesOfExiledWith {
    repeated cost.AbilityRestriction activation_restrictions = 1;
  }
  message CantCastIfAttacked {}
  message ExtraLandsPerTurn {
    uint32 count = 1;
  }
  message ForceEtbTapped {
    repeated targets.Restriction restrictions = 1;
  }
  message GreenCannotBeCountered {
    repeated targets.Restriction restrictions = 1;
  }
  message PreventAttacks {}
  message PreventBlocks {}
  message PreventAbilityActivation {}
  message UntapEachUntapStep {}

  oneof ability {
    AddKeywordsIf add_keywords_if = 1;
    AllAbilitiesOfExiledWith all_abilities_of_exiled_with = 2;
    BattlefieldModifier battlefield_modifier = 3;
    CantCastIfAttacked cant_cast_if_attacked = 4;
    ExtraLandsPerTurn extra_lands_per_turn = 5;
    ForceEtbTapped force_etb_tapped = 6;
    GreenCannotBeCountered green_cannot_be_countered = 7;
    PreventAttacks prevent_attacks = 8;
    PreventBlocks prevent_blocks = 9;
    PreventAbilityActivation prevent_ability_activation = 10;
    UntapEachUntapStep untap_each_untap_step = 11;
  }
}

message TriggeredAbility {
  triggers.Trigger trigger = 1;
  SelectMode modes = 2;
  TargetSelection targets = 3;
  repeated effects.Effect effects = 4;
  string oracle_text = 5;
}

/// Effects

message AddCounters {
  counters.Counter counter = 1;
  Count count = 2;
}

message ApplyModifier {
  BattlefieldModifier modifier = 1;
}

message ApplyToEachTarget {
  repeated Effect effects = 1;
}

message AttackSelected {}

message BanAttackingThisTurn {}

message Cascade {}

message CastSelected {
  bool pay_costs = 1;
}

message ChooseAttackers {
  repeated ids.CardId attackers = 1;
  repeated ids.Owner targets = 2;
}

message ChooseCast {
  repeated ids.CardId chosen = 1 [(comment.hidden) = true];
  bool discovering = 2 [(comment.hidden) = true];
  bool pay_costs = 3;
}

message ClearSelected {}

message CloneSelected {}

message CompleteSpellResolution {}

message CopySpellOrAbility {}

message CounterSpell {}

message CreateToken {
  message Creature {
    string name = 1;
    types.Typeline typeline = 2;
    repeated color.Color colors = 3;
    optional Count dynamic_power_toughness = 4;
    int32 power = 5;
    int32 toughness = 6;
    map<int32, uint32> keywords = 7;
  }
  message Map {}

  oneof token {
    Creature creature = 1;
    Map map = 2;
  }
}

message CreateTokenCloneOfSelected {}

message Cycling {
  map<int32, empty.Empty> types = 1;
  map<int32, empty.Empty> subtypes = 2;
}

message DamageSelected {
  Count count = 1;
}

message DeclareAttacking {}

message DestroySelected {}

message Discard {
  Count count = 1;
  repeated ids.CardId cards = 2;
}

message DiscardSelected {}

message Discover {
  Count count = 1;
}

message DrawCards {
  Count count = 1;
}

message Equip {
  repeated ModifyBattlefield modifiers = 1;
}

message ExileGraveyard {}

message Explore {}

message ForEachManaOfSource {
  mana.ManaSource source = 1;
  repeated Effect effects = 2;
}

message GainLife {
  Count count = 1;
}

message GainMana {
  message Specific {
    repeated mana.Mana gain = 1;
  }
  message GainMana {
    repeated mana.Mana gains = 1;
  }
  message Choice {
    repeated GainMana choices = 1;
  }
  oneof gain {
    Specific specific = 2;
    Choice choice = 3;
  }

  mana.ManaSource mana_source = 4;
  mana.ManaRestriction mana_restriction = 5;
}

message IfThenElse {
  repeated targets.Restriction if = 1;
  repeated Effect then = 2;
  repeated Effect else = 3;
}

message LoseLife {
  Count count = 1;
}

message Manifest {}

message Mill {
  Count count = 1;
}

message Modal {
  repeated Mode modes = 1;
  uint32 applying = 2 [(comment.hidden) = true];
}

message MoveToBattlefield {
  bool enters_tapped = 1;
}
message MoveToBottomOfLibrary {}
message MoveToExile {
  Duration duration = 1;
}
message MoveToGraveyard {}
message MoveToHand {}
message MoveToStack {}
message MoveToTopOfLibrary {
  uint32 under = 1;
}

message MultiplyTokens {
  uint32 multiplier = 1;
  repeated targets.Restriction restrictions = 2;
}

message Nothing {}

message Overwrite {
  repeated Effect effects = 1;
}

message PayCost {
  message ExileCardsSharingType {
    uint32 count = 1;
    repeated ids.CardId selected = 2 [(comment.hidden) = true];
  }

  message ExilePermanents {
    repeated targets.Restriction restrictions = 1;
    uint32 minimum = 2;
    uint32 maximum = 3;
    repeated ids.CardId selected = 4 [(comment.hidden) = true];
  }

  message ExilePermanentsCmcX {
    repeated targets.Restriction restrictions = 1;
    cost.XIs x_is = 2;
    repeated ids.CardId selected = 3 [(comment.hidden) = true];
  }

  message PayLife {
    Count count = 1;
  }

  message PayMana {
    message ManaToSource {
      message SourceToCount {
        map<int32, uint32> source_to_count = 1;
      }
      map<int32, SourceToCount> mana_to_source = 2;
    }

    repeated cost.ManaCost paying = 3;
    cost.CostReducer reducer = 4;
    map<int32, ManaToSource> paid = 5 [(comment.hidden) = true];
    mana.SpendReason reason = 6;
    bool reduced = 7 [(comment.hidden) = true];
  }

  message SacrificePermanent {
    repeated targets.Restriction restrictions = 1;
    ids.CardId selected = 2 [(comment.hidden) = true];
  }

  message TapPermanent {
    repeated targets.Restriction restrictions = 1;
    ids.CardId selected = 2 [(comment.hidden) = true];
  }

  message TapPermanentsPowerXOrMore {
    repeated targets.Restriction restrictions = 1;
    uint32 x_is = 2;
    repeated ids.CardId selected = 3 [(comment.hidden) = true];
  }

  oneof cost {
    ExileCardsSharingType exile_cards_sharing_type = 4;
    ExilePermanents exile_permanents = 5;
    ExilePermanentsCmcX exile_permanents_cmc_x = 6;
    PayLife pay_life = 7;
    PayMana pay_mana = 8;
    SacrificePermanent sacrifice_permanent = 9;
    TapPermanent tap_permanent = 10;
    TapPermanentsPowerXOrMore tap_permanents_power_x_or_more = 11;
  }
}

message PayCosts {
  message OrElse {
    repeated Effect effects = 1;
  }

  repeated PayCost pay_costs = 2;
  uint32 paying = 3;

  OrElse or_else = 4;
  bool apply_or_else = 5 [(comment.hidden) = true];
}

message PlayerLoses {}

message PopSelected {}

message PushSelected {}

message RemoveCounters {
  counters.Counter counter = 1;
  Count count = 2;
}

message ReorderSelected {
  Effect associated_effect = 1;
  uint32 reordering = 2;
}

message Reveal {}

message Sacrifice {}

message Scry {
  repeated Dest dests = 1;
  uint32 placing = 2 [(comment.hidden) = true];
}

message SelectAll {
  repeated targets.Restriction restrictions = 1;
}

message SelectAllPlayers {}

message SelectDestinations {
  repeated Dest destinations = 1;
  uint32 placing = 2;
}

message SelectEffectController {}

message SelectExiledWithCascadeOrDiscover {}

message SelectForEachPlayer {
  repeated targets.Restriction restrictions = 1;
  bool targeted = 2;
  bool optional = 3;
}

message SelectMode {
  repeated string descriptions = 1;
}

message SelectNonTargeting {
  uint32 count = 1;
  repeated targets.Restriction restrictions = 2;
}

message SelectSource {}

message SelectTargetController {}

message SelectTargets {
  bool optional = 1;
  Count count = 2;
  repeated targets.Restriction restrictions = 3;
}

message SelectTopOfLibrary {
  Count count = 1;
}

message ShuffleSelected {}

message SpendMana {
  repeated mana.Mana mana = 1;
  repeated mana.ManaSource mana_sources = 2;
  mana.SpendReason reason = 3;
}

message Tap {}

message Transform {}

message TutorLibrary {
  message Target {
    repeated targets.Restriction restrictions = 1;

    oneof destination {
      MoveToBattlefield move_to_battlefield = 2;
      MoveToExile move_to_exile = 3;
      MoveToGraveyard move_to_graveyard = 4;
      MoveToHand move_to_hand = 5;
      MoveToBottomOfLibrary move_to_bottom_of_library = 6;
      MoveToTopOfLibrary move_to_top_of_library = 7;
    }
  }

  repeated Target targets = 8;
  repeated ids.CardId selected = 9;
  bool reveal = 10;
}

message Unless {
  repeated targets.Restriction unless = 1;
  repeated Effect then = 2;
}

message Untap {}