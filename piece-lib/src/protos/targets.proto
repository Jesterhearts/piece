syntax = "proto3";

package targets;

import "color.proto";
import "counters.proto";
import "empty.proto";
import "mana.proto";
import "types.proto";

message Restriction {
  message AttackedThisTurn {}
  message Attacking {}
  message AttackingOrBlocking {}
  message CastFromHand {}
  message Chosen {}
  message Cmc {
    oneof cmc {
      Dynamic dynamic = 1;
      Comparison comparison = 2;
    }
  }
  message Controller {
    message Self {}
    message Opponent {}

    oneof controller {
      Self self = 1;
      Opponent opponent = 2;
    }
  }
  message ControllerControlsColors {
    repeated color.Color colors = 1;
  }
  message ControllerHandEmpty {}
  message ControllerJustCast {}
  message Descend {
    int32 count = 1;
  }
  message DescendedThisTurn {}
  message DuringControllersTurn {}
  message EnteredBattlefieldThisTurn {
    int32 count = 1;
    repeated Restriction restrictions = 2;
  }
  message HasActivatedAbility {}
  message InGraveyard {}
  message IsPermanent {}
  message JustDiscarded {}
  message LifeGainedThisTurn {
    uint32 count = 1;
  }
  message Locations {
    repeated Location locations = 1;
  }
  message ManaSpentFromSource {
    mana.ManaSource source = 1;
  }
  message NonToken {}
  message NotChosen {}
  message NotKeywords {
    map<int32, uint32> keywords = 1;
  }
  message NotOfType {
    map<int32, empty.Empty> types = 1;
    map<int32, empty.Empty> subtypes = 2;
  }
  message NotSelf {}
  message NumberOfCountersOnThis {
    counters.Counter counter = 1;
    Comparison comparison = 2;
  }
  message OfColor {
    repeated color.Color colors = 1;
  }
  message OfType {
    map<int32, empty.Empty> types = 1;
    map<int32, empty.Empty> subtypes = 2;
  }
  message OnBattlefield {}
  message Power {
    Comparison comparison = 1;
  }
  message Self {}
  message SourceCast {}
  message SpellOrAbilityJustCast {}
  message Tapped {}
  message TargetedBy {}
  message Threshold {}
  message Toughness {
    Comparison comparison = 1;
  }

  oneof restriction {
    // Did the controller of this card attack this turn.
    AttackedThisTurn attacked_this_turn = 2;
    // Is the card currently attacking.
    Attacking attacking = 3;
    // Is the card currently attacking or blocking
    AttackingOrBlocking attacking_or_blocking = 4;
    // Was the spell cast from the controller's hand.
    CastFromHand cast_from_hand = 5;
    // Was the card chosen.
    Chosen chosen = 6;
    // Compare against the card's mana value.
    Cmc cmc = 7;
    // Is the card controlled by you or your opponent.
    Controller controller = 8;
    // Does the controller of the card control permanents of some colors.
    ControllerControlsColors controller_controls_colors = 9;
    // Is the controller of the card's hand empty.
    ControllerHandEmpty controller_hand_empty = 10;
    // Did the controller of the card just cast a spell.
    ControllerJustCast controller_just_cast = 11;
    // Descend some number (e.g. Descend 4)
    Descend descend = 12;
    // Did the controller of the card descend this turn.
    DescendedThisTurn descended_this_turn = 13;
    // Is it currently the controller of the card's turn.
    DuringControllersTurn during_controllers_turn = 14;
    // Did the card enter the battlefield this turn.
    EnteredBattlefieldThisTurn entered_battlefield_this_turn = 15;
    // Does the card have an activated ability.
    HasActivatedAbility has_activated_ability = 16;
    // Is the card in the graveyard.
    InGraveyard in_graveyard = 17;
    // Is the card a permanent.
    IsPermanent is_permanent = 18;
    // Was the card just discarded.
    JustDiscarded just_discarded = 19;
    // Compare against the amount of life gained this turn.
    LifeGainedThisTurn life_gained_this_turn = 20;
    // Is the card in some list of locations.
    Locations location = 21;
    // Was the card cast using mana from some source e.g. Treasure.
    ManaSpentFromSource mana_spent_from_source = 22;
    // Is the card non-token.
    NonToken non_token = 23;
    // Was the card _not_ chosen.
    NotChosen not_chosen = 24;
    // The card does not contain a keyword from a list of keywords.
    NotKeywords not_keywords = 25;
    // The card does not have any of the listed types.
    NotOfType not_of_type = 26;
    // The card is not the same card as the one testing restrictions.
    NotSelf not_self = 27;
    // Compare against the number of counters on this card.
    NumberOfCountersOnThis number_of_counters_on_this = 28;
    // Is the card a color in a list of colors.
    OfColor of_color = 29;
    // Does the card have a type which intersects with a list of types.
    OfType of_type = 30;
    // Is the card on the battlefield.
    OnBattlefield on_battlefield = 31;
    // Compare against the power of the card.
    Power power = 32;
    // Is the card the same as the card testing restrictions.
    Self self = 33;
    // Was the card cast at all.
    SourceCast source_cast = 34;
    // Was the card just cast.
    SpellOrAbilityJustCast spell_or_ability_just_cast = 35;
    // Is the card tapped.
    Tapped tapped = 36;
    // Is the card testing restrictions targetted by this card.
    TargetedBy targeted_by = 37;
    // Test for the presence of Threshold (seven or more cards are in
    // controller's graveyard).
    Threshold threshold = 38;
    // Compare against the toughness of the card.
    Toughness toughness = 39;
  }
}

message Comparison {
  message LessThan {
    int32 value = 1;
  }
  message LessThanOrEqual {
    int32 value = 1;
  }
  message GreaterThan {
    int32 value = 1;
  }
  message GreaterThanOrEqual {
    int32 value = 1;
  }

  oneof value {
    LessThan less_than = 2;
    LessThanOrEqual less_than_or_equal = 3;
    GreaterThan greater_than = 4;
    GreaterThanOrEqual greater_than_or_equal = 5;
  }
}

message Dynamic {
  message X {}

  oneof dynamic {
    X x = 1;
  }
}

enum Location {
  ON_BATTLEFIELD = 0;
  IN_HAND = 1;
  IN_LIBRARY = 2;
  IN_GRAVEYARD = 3;
  IN_EXILE = 4;
  IN_STACK = 5;
}