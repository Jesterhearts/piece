syntax = "proto3";

package targets;

import "color.proto";
import "comment.proto";
import "counters.proto";
import "empty.proto";
import "mana.proto";
import "types.proto";

message Restriction {
  message AttackedThisTurn {}
  message Attacking {}
  message AttackingOrBlocking {}
  message CastFromHand {}
  message Chosen {}
  message Cmc {
    oneof cmc {
      Dynamic dynamic = 1;
      Comparison comparison = 2;
    }
  }
  message Controller {
    message Self {}
    message Opponent {}

    oneof controller {
      Self self = 1;
      Opponent opponent = 2;
    }
  }
  message ControllerControlsColors {
    repeated color.Color colors = 1;
  }
  message ControllerHandEmpty {}
  message ControllerJustCast {}
  message Descend {
    int32 count = 1;
  }
  message DescendedThisTurn {}
  message DuringControllersTurn {}
  message EnteredBattlefieldThisTurn {
    int32 count = 1;
    repeated Restriction restrictions = 2;
  }
  message HasActivatedAbility {}
  message InGraveyard {}
  message IsPermanent {}
  message JustDiscarded {}
  message LifeGainedThisTurn {
    uint32 count = 1;
  }
  message Locations {
    repeated Location locations = 1;
  }
  message ManaSpentFromSource {
    mana.ManaSource source = 1;
  }
  message NonToken {}
  message NotChosen {}
  message NotKeywords {
    map<int32, uint32> keywords = 1;
  }
  message NotOfType {
    map<int32, empty.Empty> types = 1;
    map<int32, empty.Empty> subtypes = 2;
  }
  message NotSelf {}
  message NumberOfCountersOnThis {
    counters.Counter counter = 1;
    Comparison comparison = 2;
  }
  message OfColor {
    repeated color.Color colors = 1;
  }
  message OfType {
    map<int32, empty.Empty> types = 1;
    map<int32, empty.Empty> subtypes = 2;
  }
  message OnBattlefield {}
  message Power {
    Comparison comparison = 1;
  }
  message Self {}
  message SourceCast {}
  message SpellOrAbilityJustCast {}
  message Tapped {}
  message TargetedBy {}
  message Threshold {}
  message Toughness {
    Comparison comparison = 1;
  }

  oneof restriction {
    AttackedThisTurn attacked_this_turn = 2
        [(comment.comment) =
             "Did the controller of this card attack this turn."];
    Attacking attacking = 3
        [(comment.comment) = "Is the card currently attacking."];
    AttackingOrBlocking attacking_or_blocking = 4
        [(comment.comment) = "Is the card currently attacking or blocking"];
    CastFromHand cast_from_hand = 5
        [(comment.comment) = "Was the spell cast from the controller's hand."];
    Chosen chosen = 6 [(comment.comment) = "Was the card chosen."];
    Cmc cmc = 7 [(comment.comment) = "Compare against the card's mana value."];
    Controller controller = 8
        [(comment.comment) = "Is the card controlled by you or your opponent."];
    ControllerControlsColors controller_controls_colors = 9 [
      (comment.comment) =
          "Does the controller of the card control permanents of some colors."
    ];
    ControllerHandEmpty controller_hand_empty = 10
        [(comment.comment) = "Is the controller of the card's hand empty."];
    ControllerJustCast controller_just_cast = 11
        [(comment.comment) =
             "Did the controller of the card just cast a spell."];
    Descend descend = 12
        [(comment.comment) = "Descend some number (e.g. Descend 4)"];
    DescendedThisTurn descended_this_turn = 13
        [(comment.comment) =
             "Did the controller of the card descend this turn."];
    DuringControllersTurn during_controllers_turn = 14
        [(comment.comment) =
             "Is it currently the controller of the card's turn."];
    EnteredBattlefieldThisTurn entered_battlefield_this_turn = 15
        [(comment.comment) = "Did the card enter the battlefield this turn."];
    HasActivatedAbility has_activated_ability = 16
        [(comment.comment) = "Does the card have an activated ability."];
    InGraveyard in_graveyard = 17
        [(comment.comment) = "Is the card in the graveyard."];
    IsPermanent is_permanent = 18
        [(comment.comment) = "Is the card a permanent."];
    JustDiscarded just_discarded = 19
        [(comment.comment) = "Was the card just discarded."];
    LifeGainedThisTurn life_gained_this_turn = 20
        [(comment.comment) =
             "Compare against the amount of life gained this turn."];
    Locations location = 21
        [(comment.comment) = "Is the card in some list of locations."];
    ManaSpentFromSource mana_spent_from_source = 22
        [(comment.comment) =
             "Was the card cast using mana from some source e.g. Treasure."];
    NonToken non_token = 23 [(comment.comment) = "Is the card non-token."];
    NotChosen not_chosen = 24
        [(comment.comment) = "Was the card _not_ chosen."];
    NotKeywords not_keywords = 25
        [(comment.comment) =
             "The card does not contain a keyword from a list of keywords."];
    NotOfType not_of_type = 26
        [(comment.comment) = "The card does not have any of the listed types."];
    NotSelf not_self = 27
        [(comment.comment) =
             "The card is not the same card as the one testing restrictions."];
    NumberOfCountersOnThis number_of_counters_on_this = 28
        [(comment.comment) =
             "Compare against the number of counters on this card."];
    OfColor of_color = 29
        [(comment.comment) = "Is the card a color in a list of colors."];
    OfType of_type = 30 [
      (comment.comment) =
          "Does the card have a type which intersects with a list of types."
    ];
    OnBattlefield on_battlefield = 31
        [(comment.comment) = "Is the card on the battlefield."];
    Power power = 32
        [(comment.comment) = "Compare against the power of the card."];
    Self self = 33
        [(comment.comment) =
             "Is the card the same as the card testing restrictions."];
    SourceCast source_cast = 34
        [(comment.comment) = "Was the card cast at all."];
    SpellOrAbilityJustCast spell_or_ability_just_cast = 35
        [(comment.comment) = "Was the card just cast."];
    Tapped tapped = 36 [(comment.comment) = "Is the card tapped."];
    TargetedBy targeted_by = 37
        [(comment.comment) =
             " Is the card testing restrictions targetted by this card."];
    Threshold threshold = 38 [
      (comment.comment) =
          "Test for the presence of Threshold (seven or more cards are in controller's graveyard)."
    ];
    Toughness toughness = 39
        [(comment.comment) = "Compare against the toughness of the card."];
  }
}

message Comparison {
  message LessThan {
    int32 value = 1;
  }
  message LessThanOrEqual {
    int32 value = 1;
  }
  message GreaterThan {
    int32 value = 1;
  }
  message GreaterThanOrEqual {
    int32 value = 1;
  }

  oneof value {
    LessThan less_than = 2;
    LessThanOrEqual less_than_or_equal = 3;
    GreaterThan greater_than = 4;
    GreaterThanOrEqual greater_than_or_equal = 5;
  }
}

message Dynamic {
  message X {}

  oneof dynamic {
    X x = 1;
  }
}

enum Location {
  ON_BATTLEFIELD = 0;
  IN_HAND = 1;
  IN_LIBRARY = 2;
  IN_GRAVEYARD = 3;
  IN_EXILE = 4;
  IN_STACK = 5;
}