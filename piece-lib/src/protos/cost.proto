syntax = "proto3";

package cost;

import "counters.proto";
import "mana.proto";
import "targets.proto";
import "types.proto";

enum ManaCost {
  WHITE = 0;
  BLUE = 1;
  BLACK = 2;
  RED = 3;
  GREEN = 4;
  COLORLESS = 5;
  GENERIC = 6;
  X = 7;
  TWO_X = 8;
}

message AdditionalCost {
  message DiscardThis {}
  message ExileCard {
    repeated targets.Restriction restrictions = 1;
  }
  message ExileCardsCmcX {
    repeated targets.Restriction restrictions = 1;
  }
  message ExileSharingCardType {
    int32 count = 1;
  }
  message ExileXOrMoreCards {
    int32 minimum = 1;
    repeated targets.Restriction restrictions = 2;
  }
  message PayLife {
    uint32 count = 1;
  }
  message RemoveCounters {
    counters.Counter counter = 1;
    int32 count = 2;
  }
  message SacrificePermanent {
    repeated targets.Restriction restrictions = 1;
  }
  message SacrificeSource {}
  message TapPermanent {
    repeated targets.Restriction restrictions = 1;
  }
  message TapPermanentsPowerXOrMore {
    int32 x_is = 1;
    repeated targets.Restriction restrictions = 2;
  }

  oneof cost {
    DiscardThis discard_this = 1;
    ExileCard exile_card = 2;
    ExileCardsCmcX exile_cards_cmc_x = 3;
    ExileSharingCardType exile_sharing_card_type = 4;
    ExileXOrMoreCards exile_x_or_more_cards = 5;
    PayLife pay_life = 6;
    RemoveCounters remove_counters = 7;
    SacrificePermanent sacrifice_permanent = 8;
    SacrificeSource sacrifice_source = 9;
    TapPermanent tap_permanent = 10;
    TapPermanentsPowerXOrMore tap_permanents_power_x_or_more = 11;
  }
}

message AbilityRestriction {
  message AttackedWithXOrMoreCreatures {
    int32 x_is = 1;
  }
  message OncePerTurn {}

  oneof restriction {
    AttackedWithXOrMoreCreatures attacked_with_x_or_more_creatures = 1;
    OncePerTurn once_per_turn = 2;
  }
}

message Ward {
  repeated ManaCost mana_cost = 1;
}

message CastingCost {
  repeated ManaCost mana_cost = 1;
  repeated AdditionalCost additional_costs = 2;
}

message AbilityCost {
  repeated ManaCost mana_cost = 1;
  optional bool tap = 2;
  repeated AdditionalCost additional_costs = 3;
  repeated AbilityRestriction restrictions = 4;
}

message XIs {
  message Cmc {}
  oneof x_is {
    Cmc cmc = 1;
  }
}

message CostReducer {
  message TargetTappedCreature {}

  oneof when {
    TargetTappedCreature target_tapped_creature = 1;
  }

  repeated ManaCost reduction = 2;
}